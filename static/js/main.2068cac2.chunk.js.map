{"version":3,"sources":["images/for_dev.jpg","images/for_startup.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","style","backgroundColor","href","fontSize","fontWeight","marginTop","color","id","src","forDev","alt","width","forStartup","method","acceptCharset","action","type","name","value","border","display","textAlign","padding","fontFamily","cursor","borderRadius","background","marginRight","verticalAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,sMC4G5BC,MArGf,WACE,OACE,oCACE,8BACE,yBAAKC,UAAU,0CAA0CC,MAAO,CAAEC,gBAAiB,UACjF,yBAAKF,UAAU,WACb,uBAAGG,KAAK,IAAIH,UAAU,eAAeC,MAAO,CAAEG,SAAU,SAAUC,WAAY,MAA9E,eAEF,yBAAKL,UAAU,IACb,uBAAGG,KAAK,SAASH,UAAU,gBAA3B,SACA,uBAAGG,KAAK,WAAWH,UAAU,gBAA7B,aAGJ,yBAAKA,UAAU,iCAAiCC,MAAO,CAAEC,gBAAiB,QAASI,UAAW,KAC5F,yBAAKN,UAAU,uBACb,wBAAIA,UAAU,YAAYC,MAAO,CAAEG,SAAU,SAAUG,MAAO,UAA9D,gEAGJ,yBAAKC,GAAG,QAAQR,UAAU,kCACxB,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,aAAd,uCACA,uBAAGA,UAAU,QAAb,2GAGJ,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,oDACA,uBAAGA,UAAU,QAAb,8KAEF,yBAAKA,UAAU,UACb,yBAAKS,IAAKC,IAAQC,IAAI,uBAAuBV,MAAO,CAAEW,MAAO,cAKrE,yBAAKZ,UAAU,2CACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKS,IAAKI,IAAYF,IAAI,qBAAqBV,MAAO,CAAEW,MAAO,WAEjE,yBAAKZ,UAAU,UACb,kDACA,uBAAGA,UAAU,QAAb,4DAKR,yBAAKQ,GAAG,UAAUR,UAAU,kCAC1B,yBAAKA,UAAU,aACb,uCACA,yBAAKA,UAAU,6CACb,yBAAKA,UAAU,OAAOC,MAAO,CAAEW,MAAO,UACpC,yBAAKZ,UAAU,aACb,wBAAIA,UAAU,cAAd,QACA,yBAAKA,UAAU,aACb,wCACA,wBAAIA,UAAU,aACZ,qDACA,sDACA,iDAEF,0BAAMc,OAAO,OAAOC,cAAc,QAAQC,OAAO,wCAC/C,2BAAOC,KAAK,SAASC,KAAK,OAAOC,MAAM,yTACvC,2BAAOF,KAAK,SAASC,KAAK,YAAYC,MAAM,iCAC5C,4BAAQlB,MAAO,CACbmB,OAAQ,OACRC,QAAS,eACTC,UAAW,SACXC,QAAS,WACThB,MAAO,OACPH,SAAU,OACVC,WAAY,MACZmB,WAAY,uBACZC,OAAQ,UACRC,aAAc,MACdC,WAAY,oBAEZ,yBAAKlB,IAAI,kDAAkDS,KAAK,WAAWP,IAAI,GAC7EV,MAAO,CAAE2B,YAAa,MAAOC,cAAe,YAC9C,0BAAM5B,MAAO,CAAE4B,cAAe,WAA9B,sBAUlB,4BAAQ7B,UAAU,qBAChB,yBAAKA,UAAU,aACb,0BAAMA,UAAU,cAAhB,4BCzFU8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2068cac2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/for_dev.d5a8f8f4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/for_startup.a6ab1e74.jpg\";","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport forDev from './images/for_dev.jpg';\nimport forStartup from './images/for_startup.jpg';\n\nfunction App() {\n  return (\n    <>\n      <main>\n        <nav className=\"navbar navbar-dark fixed-top d-flex p-4\" style={{ backgroundColor: 'black' }}>\n          <div className=\"mr-auto\">\n            <a href=\"/\" className=\"navbar-brand\" style={{ fontSize: '1.6rem', fontWeight: 600 }}>WhiteNodes</a>\n          </div>\n          <div className=\"\">\n            <a href=\"#about\" className=\"navbar-brand\">About</a>\n            <a href=\"#pricing\" className=\"navbar-brand\">Pricing</a>\n          </div>\n        </nav>\n        <div className=\"jumbotron jumbotron-fluid mb-0\" style={{ backgroundColor: 'black', marginTop: 96 }}>\n          <div className=\"m-5 p-5 text-center\">\n            <h1 className=\"display-4\" style={{ fontSize: '3.5rem', color: 'white' }}>The fastest and easiest way to run your own Ethereum node.</h1>\n          </div>\n        </div>\n        <div id=\"about\" className=\"jumbotron jumbotron-fluid mb-0\">\n          <div className=\"container text-center\">\n            <h1 className=\"display-4\">Your access to the Ethereum network</h1>\n            <p className=\"lead\">WhiteNodes infrastructure will ensure your decentralized application scales to meet your user demand.</p>\n          </div>\n        </div>\n        <div className=\"jumbotron jumbotron-fluid mb-0 bg-white\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm\">\n                <h3>Built for developers</h3>\n                <p className=\"lead\">Connect your app immediately with our instant access APIs. We support JSON-RPC over HTTPS and WebSocket interfaces, providing request and subscription-based connections.</p>\n              </div>\n              <div className=\"col-sm\">\n                <img src={forDev} alt=\"Built for developers\" style={{ width: '100%' }} />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"jumbotron jumbotron-fluid mb-0 bg-white\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm\">\n                <img src={forStartup} alt=\"Built for startups\" style={{ width: '100%' }} />\n              </div>\n              <div className=\"col-sm\">\n                <h3>Built for startups</h3>\n                <p className=\"lead\">Use a robust solution for your fast-growing project.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div id=\"pricing\" className=\"jumbotron jumbotron-fluid mb-0\">\n          <div className=\"container\">\n            <h2>Pricing</h2>\n            <div className=\"d-flex justify-content-center text-center\">\n              <div className=\"card\" style={{ width: '18rem' }}>\n                <div className=\"card-body\">\n                  <h3 className=\"card-title\">Team</h3>\n                  <div className=\"card-text\">\n                    <h5>1 EUR/mo</h5>\n                    <ul className=\"text-left\">\n                      <li>Ethereum Mainnet node</li>\n                      <li>1,000,000 Requests/Day</li>\n                      <li>Customer Support</li>\n                    </ul>\n                    <form method=\"POST\" acceptCharset=\"utf-8\" action=\"https://www.liqpay.ua/api/3/checkout\">\n                      <input type=\"hidden\" name=\"data\" value=\"eyJ2ZXJzaW9uIjozLCJhY3Rpb24iOiJzdWJzY3JpYmUiLCJwdWJsaWNfa2V5IjoiaTk4MTk4OTg0NDQ1IiwiYW1vdW50IjoiMSIsImN1cnJlbmN5IjoiRVVSIiwiZGVzY3JpcHRpb24iOiJUZWFtIFN1YnNjcmlwdGlvbiIsInR5cGUiOiJidXkiLCJsYW5ndWFnZSI6ImVuIiwic3Vic2NyaWJlIjoxLCJzdWJzY3JpYmVfZGF0ZV9zdGFydCI6Im5vdyIsInN1YnNjcmliZV9wZXJpb2RpY2l0eSI6Im1vbnRoIn0=\" />\n                      <input type=\"hidden\" name=\"signature\" value=\"EZx6ujxcP9e9fNei9Oh8/9bFPx8=\" />\n                      <button style={{\n                        border: 'none',\n                        display: 'inline-block',\n                        textAlign: 'center',\n                        padding: '7px 20px',\n                        color: '#fff',\n                        fontSize: '16px',\n                        fontWeight: '600',\n                        fontFamily: 'OpenSans, sans-serif',\n                        cursor: 'pointer',\n                        borderRadius: '2px',\n                        background: 'rgb(122,183,43)'\n                      }}>\n                        <img src=\"https://static.liqpay.ua/buttons/logo-small.png\" name=\"btn_text\" alt=\"\"\n                          style={{ marginRight: '7px', verticalAlign: 'middle' }} />\n                        <span style={{ verticalAlign: 'middle' }}>Subscribe</span>\n                      </button>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      <footer className=\"pt-4 pb-4 bg-dark\">\n        <div className=\"container\">\n          <span className=\"text-white\">Â© 2020 WhiteNodes</span>\n        </div>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}